/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelcasestudy;

import hotelcasestudy.ADMIN_Dashboard;
import hotelcasestudy.USER_login_menu;
import hotelcasestudy.connect;
import java.awt.Toolkit;
import java.sql.SQLException;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;



/**
 *
 * @author nejac
 */
public class ADMIN_MaintenanceScheduling extends connect {
DefaultTableModel model = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int column) {
        return false; 
    }
};
int x=0;
    /**
     * Creates new form ADMIN_USERMANAGEMENT
     */
    public ADMIN_MaintenanceScheduling() {
        initComponents();
        DoConnect();
        Select();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/images/LOGO_favicon.png")));
    }
    public void Select(){
        String [] columnsNames = {"MAIN_ID" ,"ROOM_NUMBER","STATUS","MAINTENANCE_DATE"};
        model.setColumnIdentifiers(columnsNames);
        model.setRowCount(0);

        try{
            String query = "SELECT * FROM MAINTENANCE";
            stmt = con.createStatement();
            rs = stmt.executeQuery(query);
            while(rs.next()){
                i=rs.getString("ROOM");
                s=rs.getString("STATUS");
                n=rs.getString("MAINTENANCE_DATE");
                a=rs.getString("MAIN_ID");
                model.addRow(new Object []{a,i,s,n});
                x++;
            }
        }catch(SQLException err){
            
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        rom = new javax.swing.JTextField();
        stat = new javax.swing.JTextField();
        remove_warning = new javax.swing.JPopupMenu();
        remove_text = new javax.swing.JMenuItem();
        main = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addroom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        roomn = new javax.swing.JTextField();
        statu = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        logout_btn2 = new javax.swing.JButton();
        return_btn913 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        maint = new com.toedter.calendar.JDateChooser();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        rom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                romActionPerformed(evt);
            }
        });

        remove_text.setBackground(new java.awt.Color(237, 234, 233));
        remove_text.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        remove_text.setForeground(new java.awt.Color(255, 51, 51));
        remove_text.setText("CONFIRM REMOVE");
        remove_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_textActionPerformed(evt);
            }
        });
        remove_warning.add(remove_text);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(237, 234, 233));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setBackground(new java.awt.Color(105, 73, 50));
        jLabel11.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(105, 73, 50));
        jLabel11.setText("Maintenance Scheduling");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 430, -1));

        jLabel2.setBackground(new java.awt.Color(105, 73, 50));
        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(105, 73, 50));
        jLabel2.setText("Status:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));

        jLabel4.setBackground(new java.awt.Color(105, 73, 50));
        jLabel4.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(105, 73, 50));
        jLabel4.setText("Room Number:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, -1));

        jLabel5.setBackground(new java.awt.Color(105, 73, 50));
        jLabel5.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(105, 73, 50));
        jLabel5.setText("Maintenance Date:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, -1, -1));

        addroom.setBackground(new java.awt.Color(134, 97, 72));
        addroom.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        addroom.setForeground(new java.awt.Color(255, 255, 255));
        addroom.setText("Add Room");
        addroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addroomActionPerformed(evt);
            }
        });
        jPanel1.add(addroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 140, 40));

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 170, 750, -1));

        jButton5.setBackground(new java.awt.Color(134, 97, 72));
        jButton5.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 130, 40));

        jButton4.setBackground(new java.awt.Color(134, 97, 72));
        jButton4.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Edit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 100, 40));

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });
        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, 450, -1));
        jPanel1.add(roomn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 310, 240, -1));
        jPanel1.add(statu, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 350, 240, -1));

        jPanel6.setBackground(new java.awt.Color(140, 100, 75));
        jPanel6.setForeground(new java.awt.Color(255, 255, 255));
        jPanel6.setPreferredSize(new java.awt.Dimension(1344, 70));

        jLabel8.setFont(new java.awt.Font("Sylfaen", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(226, 165, 79));

        logout_btn2.setBackground(new java.awt.Color(140, 100, 75));
        logout_btn2.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        logout_btn2.setForeground(new java.awt.Color(255, 255, 255));
        logout_btn2.setText("Log Out");
        logout_btn2.setBorder(null);
        logout_btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btn2ActionPerformed(evt);
            }
        });

        return_btn913.setBackground(new java.awt.Color(140, 100, 75));
        return_btn913.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        return_btn913.setForeground(new java.awt.Color(255, 255, 255));
        return_btn913.setText("Return to Dashboard");
        return_btn913.setBorder(null);
        return_btn913.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_btn913ActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/LOGO_topleft.png"))); // NOI18N
        jLabel9.setText("jLabel2");

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/TITLELOGO_whitesmall.png"))); // NOI18N
        jLabel10.setText("jLabel1");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(570, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(return_btn913)
                        .addGap(18, 18, 18)
                        .addComponent(logout_btn2)
                        .addGap(17, 17, 17))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(logout_btn2)
                            .addComponent(return_btn913)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        jPanel1.add(maint, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 390, 240, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1360, 765));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addroomActionPerformed

int resID = 1;
boolean recordExists = false;
try {
    con.setAutoCommit(false);
    stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
    String roomInput = roomn.getText().trim();
    String status = statu.getText().trim(); 
    Date selectedDate = maint.getDate(); 
    Date today = new Date();
    
    int roomNumber = Integer.parseInt(roomInput);
    java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
    ResultSet rs = stmt.executeQuery("SELECT * FROM MAINTENANCE");
    HashSet<Integer> existingIds = new HashSet<>();
    while (rs.next()) {
        existingIds.add(rs.getInt("MAIN_ID"));
        int existingRoom = rs.getInt("ROOM");
        Date existingMaintDate = rs.getDate("MAINTENANCE_DATE");
        if (existingRoom == roomNumber && existingMaintDate.equals(sqlDate)) {
            JOptionPane.showMessageDialog(null, "A maintenance record already exists for this room and date.");
            recordExists = true;
            
        }
        if(roomInput.isEmpty()||status.isEmpty()||selectedDate==null||selectedDate.before(today)){
        JOptionPane.showMessageDialog(null, "Invalid entry");
        recordExists = true;
        break;
        
    }
        
    }
    rs.close();
    while (existingIds.contains(resID)) {
        resID++;
    }
    if (!recordExists) {
    rs = stmt.executeQuery("SELECT * FROM MAINTENANCE");
    rs.moveToInsertRow();
    rs.updateInt("MAIN_ID", resID);
    rs.updateInt("ROOM", roomNumber);
    rs.updateDate("MAINTENANCE_DATE", sqlDate);
    rs.updateString("STATUS", status);
    rs.insertRow();  
    con.commit();   
    Select();        
    JOptionPane.showMessageDialog(null, "Maintenance record inserted successfully.");
}



} catch (NumberFormatException ne) {
    JOptionPane.showMessageDialog(null, "Room number must be an integer.");
    ne.printStackTrace();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    e.printStackTrace();
}

    }//GEN-LAST:event_addroomActionPerformed

    private void romActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_romActionPerformed

    }//GEN-LAST:event_romActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        remove_warning.show(jButton5, 0, jButton5.getHeight());
        

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
int e = jTable1.getSelectedRow();
if (e >= 0) {
    String room1 = (String) jTable1.getValueAt(e, 1);
    String status1 = (String) jTable1.getValueAt(e, 2);
    String date1 = (String) jTable1.getValueAt(e, 3);

    rom.setText(room1);
    stat.setText(status1);

    // Parse and set date to JDateChooser
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date parsedDate = sdf.parse(date1);
        main.setDate(parsedDate); // main is JDateChooser
    } catch (ParseException pe) {
        JOptionPane.showMessageDialog(null, "Failed to parse the maintenance date.");
        return;
    }

    rom.setEditable(true);
    stat.setEditable(true);

    int option = JOptionPane.showConfirmDialog(null, new Object[]{
        "Room Number:", rom,
        "Status:", stat,
        "Maintenance Date:", main
    }, "Edit Maintenance Record", JOptionPane.OK_CANCEL_OPTION);

    if (option == JOptionPane.OK_OPTION) {
        String newRoom = rom.getText().trim();
        String newStatus = stat.getText().trim();
        java.util.Date selectedDate = main.getDate(); // from JDateChooser

        if (newRoom.isEmpty() || newStatus.isEmpty() || selectedDate == null) {
            JOptionPane.showMessageDialog(null, "All fields must be filled out.");
            return;
        }

        if (!newRoom.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Room number must be an integer.");
            return;
        }

        try {
            int roomNumber = Integer.parseInt(newRoom);
            java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
            java.sql.Date originalDate = java.sql.Date.valueOf(date1.trim());

            String sql = "UPDATE MAINTENANCE SET ROOM = ?, STATUS = ?, MAINTENANCE_DATE = ? " +
                         "WHERE ROOM = ? AND MAINTENANCE_DATE = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setInt(1, roomNumber);
            pst.setString(2, newStatus);
            pst.setDate(3, sqlDate);
            pst.setInt(4, Integer.parseInt(room1.trim()));
            pst.setDate(5, originalDate);

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                // Update JTable values
                jTable1.setValueAt(newRoom, e, 1);
                jTable1.setValueAt(newStatus, e, 2);
                jTable1.setValueAt(new SimpleDateFormat("yyyy-MM-dd").format(selectedDate), e, 3);
                JOptionPane.showMessageDialog(null, "Maintenance record updated successfully.");
                con.commit();
            } else {
                JOptionPane.showMessageDialog(null, "No matching record found in the database.");
            }

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Database error: " + se.getMessage());
            se.printStackTrace();
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Please select a row to edit.");
}


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        TableRowSorter<DefaultTableModel>obj=new TableRowSorter<>(model);
        jTable1.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(rom.getText().trim()));
    }//GEN-LAST:event_jTextField4KeyReleased

    private void logout_btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btn2ActionPerformed
        // TODO add your handling code here:
        USER_login_menu userloginmenu = new USER_login_menu();
        this.setVisible(false);
        userloginmenu.setVisible(true);
    }//GEN-LAST:event_logout_btn2ActionPerformed

    private void return_btn913ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_btn913ActionPerformed
        ADMIN_Dashboard admindashboard = new ADMIN_Dashboard();
        this.dispose();
        admindashboard.setVisible(true);
    }//GEN-LAST:event_return_btn913ActionPerformed

    private void remove_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_textActionPerformed
        // TODO add your handling code here:
        int e = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        if (e >= 0) {
            String idToDelete = String.valueOf(model.getValueAt(e, 0)).trim();  // Assuming ID is at column 0
            System.out.println("Deleting ID: '" + idToDelete + "'");
            try {
                String sql = "DELETE FROM MAINTENANCE WHERE MAIN_ID = ?";
                System.out.println("Executing SQL: " + sql + " with ID: " + idToDelete);
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(idToDelete));  // Convert to int if ID is numeric
                int rowsAffected = pst.executeUpdate();
                System.out.println("Rows affected: " + rowsAffected);
                if (rowsAffected > 0) {
                    model.removeRow(e);
                    JOptionPane.showMessageDialog(null, "Deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(null, "No matching ID found in database.");
                }
                con.commit();
            } catch (SQLException a) {
                JOptionPane.showMessageDialog(null, "Database delete failed: " + a.getMessage());
                a.printStackTrace();
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Invalid ID format: " + nfe.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_remove_textActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    try {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ADMIN_MaintenanceScheduling().setVisible(true);
        });
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(ADMIN_MaintenanceScheduling.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        Logger.getLogger(ADMIN_MaintenanceScheduling.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        Logger.getLogger(ADMIN_MaintenanceScheduling.class.getName()).log(Level.SEVERE, null, ex);
    } catch (UnsupportedLookAndFeelException ex) {
        Logger.getLogger(ADMIN_MaintenanceScheduling.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addroom;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton logout_btn2;
    private com.toedter.calendar.JDateChooser main;
    private com.toedter.calendar.JDateChooser maint;
    private javax.swing.JMenuItem remove_text;
    private javax.swing.JPopupMenu remove_warning;
    private javax.swing.JButton return_btn913;
    private javax.swing.JTextField rom;
    private javax.swing.JTextField roomn;
    private javax.swing.JTextField stat;
    private javax.swing.JTextField statu;
    // End of variables declaration//GEN-END:variables
}
