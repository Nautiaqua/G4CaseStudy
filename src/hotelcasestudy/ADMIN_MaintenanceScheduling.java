/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelcasestudy;

import hotelcasestudy.ADMIN_Dashboard;
import hotelcasestudy.USER_login_menu;
import hotelcasestudy.connect;
import hotelcasestudy.connect;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashSet;



/**
 *
 * @author nejac
 */
public class ADMIN_MaintenanceScheduling extends connect {
DefaultTableModel model = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int column) {
        return false; 
    }
};
int x=0;
    /**
     * Creates new form ADMIN_USERMANAGEMENT
     */
    public ADMIN_MaintenanceScheduling() {
        initComponents();
        DoConnect();
        Select();
     
    }
    public void Select(){
        String [] columnsNames = {"MAIN_ID" ,"ROOM_NUMBER","STATUS","MAINTENANCE_DATE"};
        model.setColumnIdentifiers(columnsNames);
        model.setRowCount(0);

        try{
            String query = "SELECT * FROM MAINTENANCE";
            stmt = con.createStatement();
            rs = stmt.executeQuery(query);
            while(rs.next()){
                i=rs.getString("ROOM");
                s=rs.getString("STATUS");
                n=rs.getString("MAINTENANCE_DATE");
                a=rs.getString("MAIN_ID");
                model.addRow(new Object []{a,i,s,n});
                x++;
        rom.setEditable(true);  
        stat.setEditable(true);
        main.setEditable(true);
            }
        }catch(SQLException err){
            
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        rom = new javax.swing.JTextField();
        stat = new javax.swing.JTextField();
        main = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        logout_btn = new javax.swing.JButton();
        return_btn911 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addroom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        roomn = new javax.swing.JTextField();
        statu = new javax.swing.JTextField();
        maint = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        rom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                romActionPerformed(evt);
            }
        });

        main.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(237, 234, 233));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(140, 100, 75));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(1344, 70));

        jLabel6.setFont(new java.awt.Font("Sylfaen", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(226, 165, 79));

        logout_btn.setBackground(new java.awt.Color(140, 100, 75));
        logout_btn.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        logout_btn.setForeground(new java.awt.Color(255, 255, 255));
        logout_btn.setText("Log Out");
        logout_btn.setBorder(null);
        logout_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btnActionPerformed(evt);
            }
        });

        return_btn911.setBackground(new java.awt.Color(140, 100, 75));
        return_btn911.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        return_btn911.setForeground(new java.awt.Color(255, 255, 255));
        return_btn911.setText("Return to Dashboard");
        return_btn911.setBorder(null);
        return_btn911.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_btn911ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(683, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 1126, Short.MAX_VALUE)
                .addComponent(return_btn911)
                .addGap(42, 42, 42)
                .addComponent(logout_btn)
                .addGap(18, 18, 18))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logout_btn)
                            .addComponent(return_btn911))))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel11.setBackground(new java.awt.Color(105, 73, 50));
        jLabel11.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(105, 73, 50));
        jLabel11.setText("Maintenance Scheduling");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 430, -1));

        jLabel2.setBackground(new java.awt.Color(105, 73, 50));
        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(105, 73, 50));
        jLabel2.setText("Status:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));

        jLabel4.setBackground(new java.awt.Color(105, 73, 50));
        jLabel4.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(105, 73, 50));
        jLabel4.setText("Room Number:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, -1));

        jLabel5.setBackground(new java.awt.Color(105, 73, 50));
        jLabel5.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(105, 73, 50));
        jLabel5.setText("Maintenance Date:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, -1, -1));

        addroom.setBackground(new java.awt.Color(134, 97, 72));
        addroom.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        addroom.setForeground(new java.awt.Color(255, 255, 255));
        addroom.setText("ADD ROOM");
        addroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addroomActionPerformed(evt);
            }
        });
        jPanel1.add(addroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 150, 40));

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 170, 750, -1));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("D E L E T E  U S E R");
        jButton5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 440, -1, -1));

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("E D I T ");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 440, -1, -1));

        jTextField4.setBackground(new java.awt.Color(217, 217, 217));
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });
        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 620, 650, -1));
        jPanel1.add(roomn, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 310, 170, -1));
        jPanel1.add(statu, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 170, -1));

        maint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintActionPerformed(evt);
            }
        });
        jPanel1.add(maint, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 170, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1360, 765));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainActionPerformed

    }//GEN-LAST:event_mainActionPerformed

    private void logout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btnActionPerformed
        // TODO add your handling code here:
        USER_login_menu userloginmenu = new USER_login_menu();
        this.setVisible(false);
        userloginmenu.setVisible(true);
    }//GEN-LAST:event_logout_btnActionPerformed

    private void addroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addroomActionPerformed

int resID = 1;
newEmail = roomn.getText();  // This is ROOM_NUMBER, should be integer
newPass = statu.getText();  // STATUS
newFname = maint.getText(); // MAINTENANCE_DATE
boolean emailExists = false;
try {
    con.setAutoCommit(false);
    stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
    ResultSet rs = stmt.executeQuery("SELECT * FROM MAINTENANCE");
    HashSet<Integer> existingIds = new HashSet<>();
    while (rs.next()) {
        s = rs.getString("ROOM");
        existingIds.add(rs.getInt("MAIN_ID"));
    while (existingIds.contains(resID)) {
        resID++;
    }
        String existingDate = rs.getString("MAINTENANCE_DATE");
        if ((s == null ? newEmail == null : s.equals(newEmail)) && existingDate.equals(newFname)) {
            JOptionPane.showMessageDialog(null, "Invalid input.");
            emailExists = true;
            break;
        }
    }
    rs.close();

    if (!emailExists) {
        rs = stmt.executeQuery("SELECT * FROM MAINTENANCE");
        rs.moveToInsertRow();

        // Parse date
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date parsedDate = sdf.parse(newFname); // from JTextField 'main'
        java.sql.Date sqlDate = new java.sql.Date(parsedDate.getTime());

        // Parse room number as integer
        int roomNumber = Integer.parseInt(newEmail.trim());

        rs.updateDate("MAINTENANCE_DATE", sqlDate);
        rs.updateInt("ROOM", roomNumber);      
        rs.updateInt("MAIN_ID", resID);// INTEGER
        rs.updateString("STATUS", newPass);              // VARCHAR / TEXT
        rs.insertRow();
        

        con.commit();
        Select(); // Optional: refresh result set

        System.out.println("Inserted maintenance record successfully.");
    }

} catch (ParseException pe) {
    JOptionPane.showMessageDialog(null, "Invalid date format. Use YYYY-MM-DD.");
    pe.printStackTrace();
} catch (NumberFormatException ne) {
    JOptionPane.showMessageDialog(null, "Room number must be an integer.");
    ne.printStackTrace();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    e.printStackTrace();
}
rom.setEditable(true);  // For example, make 'rom' text field editable
stat.setEditable(true);
main.setEditable(true);


    }//GEN-LAST:event_addroomActionPerformed

    private void romActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_romActionPerformed

    }//GEN-LAST:event_romActionPerformed

    private void return_btn911ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_btn911ActionPerformed
        ADMIN_Dashboard admindashboard = new ADMIN_Dashboard();
        this.dispose();
        admindashboard.setVisible(true);
    }//GEN-LAST:event_return_btn911ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        int e = jTable1.getSelectedRow();
DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

if (e >= 0) {
    String idToDelete = String.valueOf(model.getValueAt(e, 0)).trim();  // Assuming ID is at column 0
    System.out.println("Deleting ID: '" + idToDelete + "'");
    try {
        String sql = "DELETE FROM MAINTENANCE WHERE MAIN_ID = ?";
        System.out.println("Executing SQL: " + sql + " with ID: " + idToDelete);
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setInt(1, Integer.parseInt(idToDelete));  // Convert to int if ID is numeric
        int rowsAffected = pst.executeUpdate();
        System.out.println("Rows affected: " + rowsAffected);
        if (rowsAffected > 0) {
            model.removeRow(e);
            JOptionPane.showMessageDialog(null, "Deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(null, "No matching ID found in database.");
        }
        con.commit();
    } catch (SQLException a) {
        JOptionPane.showMessageDialog(null, "Database delete failed: " + a.getMessage());
        a.printStackTrace();
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(null, "Invalid ID format: " + nfe.getMessage());
    }
} else {
    JOptionPane.showMessageDialog(null, "Please select a row to delete.");
}


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
int e = jTable1.getSelectedRow(); // Assume jTable1 displays ROOM, STATUS, MAINTENANCE_DATE

if (e >= 0) {
    // Get current values from the selected row
    String room1 = (String) jTable1.getValueAt(e, 1);  // ROOM_NUMBER (as String)
    String status1 = (String) jTable1.getValueAt(e, 2); // STATUS
    String date1 = (String) jTable1.getValueAt(e, 3);   // MAINTENANCE_DATE

    // Set current values to input fields
    rom.setText(room1);
    stat.setText(status1);
    main.setText(date1);

    // Ensure the text fields are editable before showing the dialog
    rom.setEditable(true);
    stat.setEditable(true);
    main.setEditable(true);

    // Show confirmation dialog with input fields
    int option = JOptionPane.showConfirmDialog(null, new Object[] {
        "Room Number:", rom,
        "Status:", stat,
        "Maintenance Date (YYYY-MM-DD):", main
    }, "Edit Maintenance Record", JOptionPane.OK_CANCEL_OPTION);

    if (option == JOptionPane.OK_OPTION) {
        // Get new values from input fields
        String newRoom = rom.getText().trim();
        String newStatus = stat.getText().trim();
        String newDate = main.getText().trim();

        // Validate input
        if (newRoom.isEmpty() || newStatus.isEmpty() || newDate.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled out.");
            return;
        }

        if (!newRoom.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Room number must be an integer.");
            return;
        }

        try {
            int roomNumber = Integer.parseInt(newRoom);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date parsedDate = sdf.parse(newDate);
            java.sql.Date sqlDate = new java.sql.Date(parsedDate.getTime());

            String sql = "UPDATE MAINTENANCE SET ROOM = ?, STATUS = ?, MAINTENANCE_DATE = ? " +
                         "WHERE ROOM = ? AND MAINTENANCE_DATE = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setInt(1, roomNumber);
            pst.setString(2, newStatus);
            pst.setDate(3, sqlDate);
            pst.setInt(4, Integer.parseInt(room1.trim()));
            pst.setDate(5, java.sql.Date.valueOf(date1.trim()));

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                // Update table model
                jTable1.setValueAt(newRoom, e, 1);
                jTable1.setValueAt(newStatus, e, 2);
                jTable1.setValueAt(newDate, e, 3);
                JOptionPane.showMessageDialog(null, "Maintenance record updated successfully.");
                con.commit();
            } else {
                JOptionPane.showMessageDialog(null, "No matching record found in the database.");
            }

        } catch (ParseException pe) {
            JOptionPane.showMessageDialog(null, "Invalid date format. Use YYYY-MM-DD.");
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Database error: " + se.getMessage());
            se.printStackTrace();
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Please select a row to edit.");
}



    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        TableRowSorter<DefaultTableModel>obj=new TableRowSorter<>(model);
        jTable1.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(rom.getText().trim()));
    }//GEN-LAST:event_jTextField4KeyReleased

    private void maintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ADMIN_MaintenanceScheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ADMIN_MaintenanceScheduling().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addroom;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton logout_btn;
    private javax.swing.JTextField main;
    private javax.swing.JTextField maint;
    private javax.swing.JButton return_btn911;
    private javax.swing.JTextField rom;
    private javax.swing.JTextField roomn;
    private javax.swing.JTextField stat;
    private javax.swing.JTextField statu;
    // End of variables declaration//GEN-END:variables
}
